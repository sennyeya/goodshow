// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  locationId  String
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  artists     Artist[]
  ticketOfferings TicketOffering[]
}

model Artist {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  link    String
  name    String
}

model Location {
  id            String         @id @default(cuid())
  name          String
  address       String
  zip           String
  city          String
  state         String
  country       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
  
  approvedUsers ApprovedUser[]

  events Event[]
}

model ApprovedUser {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())

  @@id([userId, locationId])
}

model TicketOffering {
  id                 String   @id @default(cuid())
  type               String
  quantity_max       Int
  quantity_remaining Int
  price              Decimal
  eventId            String
  event              Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets            Ticket[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Ticket {
  id               String         @id @default(cuid())
  user             User?          @relation(fields: [userId], references: [id])
  userId           String?
  ticketOffering   TicketOffering @relation(fields: [ticketOfferingId], references: [id])
  ticketOfferingId String
  stripeSessionId  String?
  status           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  role              String?  // New Column
  stripeAccountId   String?
  accounts          Account[]
  sessions          Session[]
  events            Event[]
  tickets           Ticket[]
  approvedLocations ApprovedUser[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

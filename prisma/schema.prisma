// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Event {
  id            String    @id @default(cuid())
  title         String
  organizerId   String
  organizer     User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Location {
  id            String @id @default(cuid())
  address       String
  zip           String
  city          String
  state         String
  country       String
  approvedUsers ApprovedUser[]
}

model ApprovedUser {
  @@id([userId, locationId])
  user       User     @relation(fields: [userId], references: [id])
  userId     String 
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
}

model TicketOffering {
  id                  String  @id @default(cuid())
  type                String
  quantity_max        Int
  quantity_remaining  Int
  tickets             Ticket[]
}

model Ticket {
  @@id([userId, ticketOfferingId])
  user              User     @relation(fields: [userId], references: [id])
  userId            String 
  ticketOffering    TicketOffering @relation(fields: [ticketOfferingId], references: [id])
  ticketOfferingId  String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  tickets       Ticket[]
  approvedLocations ApprovedUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
